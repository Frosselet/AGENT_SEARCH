[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-documentation-agent"
version = "0.1.0"
description = "AI agent that searches for Python package documentation to avoid hallucinations during code generation"
authors = [
    {name = "AI Documentation Agent", email = "agent@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["ai", "documentation", "code-generation", "aws-lambda", "baml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core async and HTTP
    "httpx>=0.24.0",
    "aiofiles>=23.1.0",
    "aiosqlite>=0.19.0",
    # Data processing and analysis
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "packaging>=23.0",
    # Web scraping and parsing
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "selectolax>=0.3.0",
    # Package management and analysis
    "pip-api>=0.0.30",
    # BAML framework - will be installed separately
    # "baml-py>=0.44.0",  # Uncomment when BAML is available
    # CLI interface
    "click>=8.0.0",
    "rich>=13.0.0",
    "baml-py==0.89.0",
    "pydantic>=2.11.7",
]

[project.optional-dependencies]
# AWS Lambda optimization tools
aws = [
    "boto3>=1.28.0",
    "aws-lambda-powertools>=2.20.0",
]

# Performance alternatives for comparison testing
performance = [
    "polars>=0.18.0",  # pandas alternative
    "orjson>=3.9.0",   # json alternative
    "ujson>=5.8.0",    # json alternative
    "httpx>=0.24.0",   # requests alternative
]

# Development and testing
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

# Documentation and examples
docs = [
    "jupyter>=1.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
]

# All optional dependencies
all = [
    "ai-documentation-agent[aws,performance,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/yourusername/ai-documentation-agent"
Documentation = "https://github.com/yourusername/ai-documentation-agent#readme"
Repository = "https://github.com/yourusername/ai-documentation-agent"
"Bug Tracker" = "https://github.com/yourusername/ai-documentation-agent/issues"

[project.scripts]
ai-doc-agent = "src.main:cli_main"
modernize = "cli:modernize"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
