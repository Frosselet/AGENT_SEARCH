###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

from enum import Enum
from typing import Dict, Generic, List, Optional, TypeVar, Union

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from pydantic import BaseModel, ConfigDict
from typing_extensions import Literal, TypeAlias

T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: dict[CheckName, Check]

def get_checks(checks: dict[CheckName, Check]) -> list[Check]:
    return list(checks.values())

def all_succeeded(checks: dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AgentDecision(BaseModel):
    agent_name: str
    decision: str
    confidence: float
    reasoning: str
    outputs: str

class AnalysisResults(BaseModel):
    currentPattern: str
    complexityScore: float
    performanceImprovement: str
    costSavings: str
    awsServices: list[str]
    feasibility: str

class ArchitectureDecision(BaseModel):
    primary_service: str
    supporting_services: list[str]
    pattern: str
    splitter_node: str
    rationale: str
    estimated_performance_improvement: str
    estimated_cost_reduction: str
    scalability: str
    splitter_analysis: "SplitterAnalysis"

class BusinessLogic(BaseModel):
    data_sources: list[str]
    transformations: list[str]
    outputs: list[str]
    business_rules: list[str]
    error_handling: "ErrorHandling"
    configuration: list[str]

class ChatContext(BaseModel):
    userMessage: str
    conversationHistory: list["ChatMessage"]
    currentFileContext: Optional["FileContext"] = None
    workspaceContext: "WorkspaceContext"

class ChatMessage(BaseModel):
    type: str
    content: str
    timestamp: str

class ChatResponse(BaseModel):
    intent: str
    confidence: float
    content: str
    suggestedActions: list[str]
    followUpQuestions: list[str]
    requiresFileAccess: bool
    recommendedCommands: list[str]

class CodeAnalysisResult(BaseModel):
    packages_detected: list[str]
    trigger_reasons: list[str]
    recommendations: list["CodeRecommendation"]
    lambda_optimizations: list[str]

class CodeRecommendation(BaseModel):
    type: str
    current_code: str
    suggested_code: str
    reason: str
    confidence_score: float

class ConflictResolution(BaseModel):
    conflicting_agents: list[str]
    conflict_description: str
    proposed_solutions: list[str]
    final_decision: str
    confidence_score: float

class CostEstimate(BaseModel):
    reduction_percentage: float
    monthly_savings_usd: float
    cost_factors: list[str]

class CustomRepoInfo(BaseModel):
    repo_name: str
    functions_available: list[str]
    classes_available: list[str]
    latest_version: str
    documentation_url: Optional[str] = None

class DataFlow(BaseModel):
    type: str
    target: str
    source: str
    line_number: int

class DeprecationAnalysis(BaseModel):
    package_name: str
    method_name: str
    is_deprecated: bool
    deprecation_version: Optional[str] = None
    removal_version: Optional[str] = None
    alternatives: list[str]
    migration_notes: list[str]

class EfficiencyComparison(BaseModel):
    package_name: str
    alternatives: list["PackageAlternative"]
    recommendation: str
    performance_notes: list[str]
    lambda_compatibility: bool

class ErrorHandling(BaseModel):
    has_try_catch: bool
    exception_types: list[str]
    logging_present: bool

class FileContext(BaseModel):
    fileName: str
    language: str
    content: str
    analysisResults: Optional["AnalysisResults"] = None

class PackageAlternative(BaseModel):
    name: str
    performance_score: float
    lambda_size_mb: float
    pros: list[str]
    cons: list[str]
    use_cases: list[str]

class PackageInfo(BaseModel):
    name: str
    version: str
    description: Optional[str] = None
    docs_url: Optional[str] = None
    repo_url: Optional[str] = None
    is_deprecated: bool
    deprecated_methods: list[str]
    alternative_packages: list[str]

class PerformanceEstimate(BaseModel):
    improvement_percentage: float
    bottleneck_reduction: str
    scalability_factor: float

class PipelineAnalysisResult(BaseModel):
    current_pattern: str
    functions_detected: list["PipelineFunction"]
    complexity_score: float
    migration_feasibility: str
    estimated_effort_hours: int
    aws_service_recommendations: list[str]
    business_logic: "BusinessLogic"
    dependencies: list[str]
    data_flow: list["DataFlow"]

class PipelineFunction(BaseModel):
    name: str
    line_count: int
    arguments: list[str]
    has_async: bool
    has_decorators: bool
    decorators: list[str]
    calls_external_apis: bool
    file_operations: bool
    database_operations: bool
    data_transformations: bool

class PipelineStageAnalysis(BaseModel):
    stage_name: str
    complexity: str
    runtime_estimate: str
    parallelization_benefit: str
    bottleneck_potential: str
    split_justification: Optional[str] = None

class Resume(BaseModel):
    name: str
    email: str
    experience: list[str]
    skills: list[str]

class SplitterAnalysis(BaseModel):
    optimal_split_point: str
    split_rationale: str
    pipeline_stages_analysis: list["PipelineStageAnalysis"]
    performance_impact: "PerformanceEstimate"
    cost_impact: "CostEstimate"

class TransformationRequest(BaseModel):
    pipeline_code: str
    business_requirements: str
    target_platform: str
    performance_goals: str

class TransformationResult(BaseModel):
    success: bool
    transformed_code: str
    validation_results: str
    infrastructure_code: str
    git_workflow_results: str

class ValidationResult(BaseModel):
    functional_equivalence: bool
    performance_maintained: bool
    security_validated: bool
    test_coverage_adequate: bool
    issues_found: list[str]

class WorkspaceContext(BaseModel):
    pythonFiles: list[str]
    recentAnalyses: list["AnalysisResults"]
    projectType: Optional[str] = None
