###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

import pprint

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Type, TypedDict, TypeVar, Union, cast

import baml_py
from pydantic import BaseModel, ValidationError, create_model
from typing_extensions import Literal, NotRequired

from . import partial_types, types
from .async_request import AsyncHttpRequest, AsyncHttpStreamRequest
from .globals import (
    DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
    DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
)
from .parser import LlmResponseParser, LlmStreamParser
from .type_builder import TypeBuilder
from .types import Check, Checked

OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, list[baml_py.baml_py.Collector]]]


class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: "AsyncHttpRequest"
    __http_stream_request: "AsyncHttpStreamRequest"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser
    __baml_options: BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = AsyncHttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = AsyncHttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    def with_options(
      self,
      tb: Optional[TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, list[baml_py.baml_py.Collector]]] = None,
    ) -> "BamlAsyncClient":
      """
      Returns a new instance of BamlAsyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector

      return BamlAsyncClient(self.__runtime, self.__ctx_manager, new_options)

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser


    async def AnalyzeChatIntent(
        self,
        message: str,conversationHistory: list[types.ChatMessage],
        baml_options: BamlCallOptions = {},
    ) -> str:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "AnalyzeChatIntent",
        {
          "message": message,"conversationHistory": conversationHistory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))

    async def AnalyzeCodeForTriggers(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CodeAnalysisResult:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "AnalyzeCodeForTriggers",
        {
          "code": code,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.CodeAnalysisResult, raw.cast_to(types, types, partial_types, False))

    async def AnalyzePipelineStructure(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PipelineAnalysisResult:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "AnalyzePipelineStructure",
        {
          "code": code,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PipelineAnalysisResult, raw.cast_to(types, types, partial_types, False))

    async def AnalyzeSplitterOptimization(
        self,
        pipeline_code: str,business_requirements: str,performance_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SplitterAnalysis:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "AnalyzeSplitterOptimization",
        {
          "pipeline_code": pipeline_code,"business_requirements": business_requirements,"performance_constraints": performance_constraints,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SplitterAnalysis, raw.cast_to(types, types, partial_types, False))

    async def CheckDeprecation(
        self,
        package_name: str,method_name: str,
        baml_options: BamlCallOptions = {},
    ) -> types.DeprecationAnalysis:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CheckDeprecation",
        {
          "package_name": package_name,"method_name": method_name,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.DeprecationAnalysis, raw.cast_to(types, types, partial_types, False))

    async def ComparePackageEfficiency(
        self,
        package_name: str,use_case: str,
        baml_options: BamlCallOptions = {},
    ) -> types.EfficiencyComparison:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ComparePackageEfficiency",
        {
          "package_name": package_name,"use_case": use_case,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.EfficiencyComparison, raw.cast_to(types, types, partial_types, False))

    async def CoordinateTransformation(
        self,
        agent_outputs: str,conflicts: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ConflictResolution:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CoordinateTransformation",
        {
          "agent_outputs": agent_outputs,"conflicts": conflicts,"business_requirements": business_requirements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ConflictResolution, raw.cast_to(types, types, partial_types, False))

    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Resume:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Resume, raw.cast_to(types, types, partial_types, False))

    async def GenerateCodeExplanation(
        self,
        code: str,question: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ChatResponse:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateCodeExplanation",
        {
          "code": code,"question": question,"context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ChatResponse, raw.cast_to(types, types, partial_types, False))

    async def GenerateCodeRecommendations(
        self,
        analysis: types.CodeAnalysisResult,package_info: list[types.PackageInfo],efficiency_data: list[types.EfficiencyComparison],
        baml_options: BamlCallOptions = {},
    ) -> list[types.CodeRecommendation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateCodeRecommendations",
        {
          "analysis": analysis,"package_info": package_info,"efficiency_data": efficiency_data,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(list[types.CodeRecommendation], raw.cast_to(types, types, partial_types, False))

    async def OptimizeArchitecture(
        self,
        pipeline_code: str,business_requirements: str,performance_targets: str,cost_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ArchitectureDecision:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "OptimizeArchitecture",
        {
          "pipeline_code": pipeline_code,"business_requirements": business_requirements,"performance_targets": performance_targets,"cost_constraints": cost_constraints,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ArchitectureDecision, raw.cast_to(types, types, partial_types, False))

    async def ProcessChatMessage(
        self,
        context: types.ChatContext,
        baml_options: BamlCallOptions = {},
    ) -> types.ChatResponse:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ProcessChatMessage",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ChatResponse, raw.cast_to(types, types, partial_types, False))

    async def ResolveConflicts(
        self,
        validation_results: str,agent_outputs: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ConflictResolution:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ResolveConflicts",
        {
          "validation_results": validation_results,"agent_outputs": agent_outputs,"business_requirements": business_requirements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ConflictResolution, raw.cast_to(types, types, partial_types, False))

    async def SuggestNextSteps(
        self,
        currentState: str,userGoals: str,fileContext: Optional[types.FileContext],
        baml_options: BamlCallOptions = {},
    ) -> types.ChatResponse:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SuggestNextSteps",
        {
          "currentState": currentState,"userGoals": userGoals,"fileContext": fileContext,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ChatResponse, raw.cast_to(types, types, partial_types, False))

    async def ValidateStrategy(
        self,
        transformation_plan: str,business_requirements: str,risk_tolerance: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ValidationResult:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ValidateStrategy",
        {
          "transformation_plan": transformation_plan,"business_requirements": business_requirements,"risk_tolerance": risk_tolerance,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ValidationResult, raw.cast_to(types, types, partial_types, False))



class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}


    def AnalyzeChatIntent(
        self,
        message: str,conversationHistory: list[types.ChatMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "AnalyzeChatIntent",
        {
          "message": message,
          "conversationHistory": conversationHistory,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def AnalyzeCodeForTriggers(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.CodeAnalysisResult, types.CodeAnalysisResult]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "AnalyzeCodeForTriggers",
        {
          "code": code,
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.CodeAnalysisResult, types.CodeAnalysisResult](
        raw,
        lambda x: cast(partial_types.CodeAnalysisResult, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.CodeAnalysisResult, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def AnalyzePipelineStructure(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.PipelineAnalysisResult, types.PipelineAnalysisResult]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "AnalyzePipelineStructure",
        {
          "code": code,
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.PipelineAnalysisResult, types.PipelineAnalysisResult](
        raw,
        lambda x: cast(partial_types.PipelineAnalysisResult, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PipelineAnalysisResult, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def AnalyzeSplitterOptimization(
        self,
        pipeline_code: str,business_requirements: str,performance_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SplitterAnalysis, types.SplitterAnalysis]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "AnalyzeSplitterOptimization",
        {
          "pipeline_code": pipeline_code,
          "business_requirements": business_requirements,
          "performance_constraints": performance_constraints,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SplitterAnalysis, types.SplitterAnalysis](
        raw,
        lambda x: cast(partial_types.SplitterAnalysis, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SplitterAnalysis, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def CheckDeprecation(
        self,
        package_name: str,method_name: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.DeprecationAnalysis, types.DeprecationAnalysis]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CheckDeprecation",
        {
          "package_name": package_name,
          "method_name": method_name,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.DeprecationAnalysis, types.DeprecationAnalysis](
        raw,
        lambda x: cast(partial_types.DeprecationAnalysis, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.DeprecationAnalysis, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def ComparePackageEfficiency(
        self,
        package_name: str,use_case: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.EfficiencyComparison, types.EfficiencyComparison]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ComparePackageEfficiency",
        {
          "package_name": package_name,
          "use_case": use_case,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.EfficiencyComparison, types.EfficiencyComparison](
        raw,
        lambda x: cast(partial_types.EfficiencyComparison, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.EfficiencyComparison, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def CoordinateTransformation(
        self,
        agent_outputs: str,conflicts: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ConflictResolution, types.ConflictResolution]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CoordinateTransformation",
        {
          "agent_outputs": agent_outputs,
          "conflicts": conflicts,
          "business_requirements": business_requirements,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ConflictResolution, types.ConflictResolution](
        raw,
        lambda x: cast(partial_types.ConflictResolution, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ConflictResolution, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Resume, types.Resume]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExtractResume",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Resume, types.Resume](
        raw,
        lambda x: cast(partial_types.Resume, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Resume, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def GenerateCodeExplanation(
        self,
        code: str,question: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ChatResponse, types.ChatResponse]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateCodeExplanation",
        {
          "code": code,
          "question": question,
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ChatResponse, types.ChatResponse](
        raw,
        lambda x: cast(partial_types.ChatResponse, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ChatResponse, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def GenerateCodeRecommendations(
        self,
        analysis: types.CodeAnalysisResult,package_info: list[types.PackageInfo],efficiency_data: list[types.EfficiencyComparison],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[list[partial_types.CodeRecommendation], list[types.CodeRecommendation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateCodeRecommendations",
        {
          "analysis": analysis,
          "package_info": package_info,
          "efficiency_data": efficiency_data,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[list[partial_types.CodeRecommendation], list[types.CodeRecommendation]](
        raw,
        lambda x: cast(list[partial_types.CodeRecommendation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(list[types.CodeRecommendation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def OptimizeArchitecture(
        self,
        pipeline_code: str,business_requirements: str,performance_targets: str,cost_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ArchitectureDecision, types.ArchitectureDecision]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "OptimizeArchitecture",
        {
          "pipeline_code": pipeline_code,
          "business_requirements": business_requirements,
          "performance_targets": performance_targets,
          "cost_constraints": cost_constraints,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ArchitectureDecision, types.ArchitectureDecision](
        raw,
        lambda x: cast(partial_types.ArchitectureDecision, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ArchitectureDecision, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def ProcessChatMessage(
        self,
        context: types.ChatContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ChatResponse, types.ChatResponse]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ProcessChatMessage",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ChatResponse, types.ChatResponse](
        raw,
        lambda x: cast(partial_types.ChatResponse, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ChatResponse, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def ResolveConflicts(
        self,
        validation_results: str,agent_outputs: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ConflictResolution, types.ConflictResolution]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ResolveConflicts",
        {
          "validation_results": validation_results,
          "agent_outputs": agent_outputs,
          "business_requirements": business_requirements,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ConflictResolution, types.ConflictResolution](
        raw,
        lambda x: cast(partial_types.ConflictResolution, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ConflictResolution, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def SuggestNextSteps(
        self,
        currentState: str,userGoals: str,fileContext: Optional[types.FileContext],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ChatResponse, types.ChatResponse]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SuggestNextSteps",
        {
          "currentState": currentState,
          "userGoals": userGoals,
          "fileContext": fileContext,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ChatResponse, types.ChatResponse](
        raw,
        lambda x: cast(partial_types.ChatResponse, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ChatResponse, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )

    def ValidateStrategy(
        self,
        transformation_plan: str,business_requirements: str,risk_tolerance: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ValidationResult, types.ValidationResult]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ValidateStrategy",
        {
          "transformation_plan": transformation_plan,
          "business_requirements": business_requirements,
          "risk_tolerance": risk_tolerance,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ValidationResult, types.ValidationResult](
        raw,
        lambda x: cast(partial_types.ValidationResult, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ValidationResult, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )



b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]
