###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Type, TypedDict, Union

import baml_py
from typing_extensions import Literal, NotRequired

from . import types
from .type_builder import TypeBuilder
from .types import Check, Checked


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager


    async def AnalyzeChatIntent(
        self,
        message: str,conversationHistory: list[types.ChatMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzeChatIntent",
        {
          "message": message,
          "conversationHistory": conversationHistory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def AnalyzeCodeForTriggers(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzeCodeForTriggers",
        {
          "code": code,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def AnalyzePipelineStructure(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzePipelineStructure",
        {
          "code": code,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def AnalyzeSplitterOptimization(
        self,
        pipeline_code: str,business_requirements: str,performance_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzeSplitterOptimization",
        {
          "pipeline_code": pipeline_code,
          "business_requirements": business_requirements,
          "performance_constraints": performance_constraints,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def CheckDeprecation(
        self,
        package_name: str,method_name: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckDeprecation",
        {
          "package_name": package_name,
          "method_name": method_name,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def ComparePackageEfficiency(
        self,
        package_name: str,use_case: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ComparePackageEfficiency",
        {
          "package_name": package_name,
          "use_case": use_case,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def CoordinateTransformation(
        self,
        agent_outputs: str,conflicts: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CoordinateTransformation",
        {
          "agent_outputs": agent_outputs,
          "conflicts": conflicts,
          "business_requirements": business_requirements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def GenerateCodeExplanation(
        self,
        code: str,question: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateCodeExplanation",
        {
          "code": code,
          "question": question,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def GenerateCodeRecommendations(
        self,
        analysis: types.CodeAnalysisResult,package_info: list[types.PackageInfo],efficiency_data: list[types.EfficiencyComparison],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateCodeRecommendations",
        {
          "analysis": analysis,
          "package_info": package_info,
          "efficiency_data": efficiency_data,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def OptimizeArchitecture(
        self,
        pipeline_code: str,business_requirements: str,performance_targets: str,cost_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "OptimizeArchitecture",
        {
          "pipeline_code": pipeline_code,
          "business_requirements": business_requirements,
          "performance_targets": performance_targets,
          "cost_constraints": cost_constraints,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def ProcessChatMessage(
        self,
        context: types.ChatContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ProcessChatMessage",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def ResolveConflicts(
        self,
        validation_results: str,agent_outputs: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ResolveConflicts",
        {
          "validation_results": validation_results,
          "agent_outputs": agent_outputs,
          "business_requirements": business_requirements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def SuggestNextSteps(
        self,
        currentState: str,userGoals: str,fileContext: Optional[types.FileContext],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "SuggestNextSteps",
        {
          "currentState": currentState,
          "userGoals": userGoals,
          "fileContext": fileContext,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )

    async def ValidateStrategy(
        self,
        transformation_plan: str,business_requirements: str,risk_tolerance: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateStrategy",
        {
          "transformation_plan": transformation_plan,
          "business_requirements": business_requirements,
          "risk_tolerance": risk_tolerance,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )



class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager


    async def AnalyzeChatIntent(
        self,
        message: str,conversationHistory: list[types.ChatMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzeChatIntent",
        {
          "message": message,
          "conversationHistory": conversationHistory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def AnalyzeCodeForTriggers(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzeCodeForTriggers",
        {
          "code": code,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def AnalyzePipelineStructure(
        self,
        code: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzePipelineStructure",
        {
          "code": code,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def AnalyzeSplitterOptimization(
        self,
        pipeline_code: str,business_requirements: str,performance_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AnalyzeSplitterOptimization",
        {
          "pipeline_code": pipeline_code,
          "business_requirements": business_requirements,
          "performance_constraints": performance_constraints,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def CheckDeprecation(
        self,
        package_name: str,method_name: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckDeprecation",
        {
          "package_name": package_name,
          "method_name": method_name,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def ComparePackageEfficiency(
        self,
        package_name: str,use_case: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ComparePackageEfficiency",
        {
          "package_name": package_name,
          "use_case": use_case,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def CoordinateTransformation(
        self,
        agent_outputs: str,conflicts: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CoordinateTransformation",
        {
          "agent_outputs": agent_outputs,
          "conflicts": conflicts,
          "business_requirements": business_requirements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def GenerateCodeExplanation(
        self,
        code: str,question: str,context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateCodeExplanation",
        {
          "code": code,
          "question": question,
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def GenerateCodeRecommendations(
        self,
        analysis: types.CodeAnalysisResult,package_info: list[types.PackageInfo],efficiency_data: list[types.EfficiencyComparison],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateCodeRecommendations",
        {
          "analysis": analysis,
          "package_info": package_info,
          "efficiency_data": efficiency_data,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def OptimizeArchitecture(
        self,
        pipeline_code: str,business_requirements: str,performance_targets: str,cost_constraints: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "OptimizeArchitecture",
        {
          "pipeline_code": pipeline_code,
          "business_requirements": business_requirements,
          "performance_targets": performance_targets,
          "cost_constraints": cost_constraints,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def ProcessChatMessage(
        self,
        context: types.ChatContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ProcessChatMessage",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def ResolveConflicts(
        self,
        validation_results: str,agent_outputs: str,business_requirements: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ResolveConflicts",
        {
          "validation_results": validation_results,
          "agent_outputs": agent_outputs,
          "business_requirements": business_requirements,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def SuggestNextSteps(
        self,
        currentState: str,userGoals: str,fileContext: Optional[types.FileContext],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "SuggestNextSteps",
        {
          "currentState": currentState,
          "userGoals": userGoals,
          "fileContext": fileContext,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )

    async def ValidateStrategy(
        self,
        transformation_plan: str,business_requirements: str,risk_tolerance: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateStrategy",
        {
          "transformation_plan": transformation_plan,
          "business_requirements": business_requirements,
          "risk_tolerance": risk_tolerance,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )



__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]
