###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

from enum import Enum
from typing import Dict, Generic, List, Optional, TypeVar, Union

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from pydantic import BaseModel, ConfigDict
from typing_extensions import Literal, TypeAlias

from . import types
from .types import Check, Checked

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class AgentDecision(BaseModel):
    agent_name: Optional[str] = None
    decision: Optional[str] = None
    confidence: Optional[float] = None
    reasoning: Optional[str] = None
    outputs: Optional[str] = None

class AnalysisResults(BaseModel):
    currentPattern: Optional[str] = None
    complexityScore: Optional[float] = None
    performanceImprovement: Optional[str] = None
    costSavings: Optional[str] = None
    awsServices: list[str]
    feasibility: Optional[str] = None

class ArchitectureDecision(BaseModel):
    primary_service: Optional[str] = None
    supporting_services: list[str]
    pattern: Optional[str] = None
    splitter_node: Optional[str] = None
    rationale: Optional[str] = None
    estimated_performance_improvement: Optional[str] = None
    estimated_cost_reduction: Optional[str] = None
    scalability: Optional[str] = None
    splitter_analysis: Optional["SplitterAnalysis"] = None

class BusinessLogic(BaseModel):
    data_sources: list[str]
    transformations: list[str]
    outputs: list[str]
    business_rules: list[str]
    error_handling: Optional["ErrorHandling"] = None
    configuration: list[str]

class ChatContext(BaseModel):
    userMessage: Optional[str] = None
    conversationHistory: list["ChatMessage"]
    currentFileContext: Optional["FileContext"] = None
    workspaceContext: Optional["WorkspaceContext"] = None

class ChatMessage(BaseModel):
    type: Optional[str] = None
    content: Optional[str] = None
    timestamp: Optional[str] = None

class ChatResponse(BaseModel):
    intent: Optional[str] = None
    confidence: Optional[float] = None
    content: Optional[str] = None
    suggestedActions: list[str]
    followUpQuestions: list[str]
    requiresFileAccess: Optional[bool] = None
    recommendedCommands: list[str]

class CodeAnalysisResult(BaseModel):
    packages_detected: list[str]
    trigger_reasons: list[str]
    recommendations: list["CodeRecommendation"]
    lambda_optimizations: list[str]

class CodeRecommendation(BaseModel):
    type: Optional[str] = None
    current_code: Optional[str] = None
    suggested_code: Optional[str] = None
    reason: Optional[str] = None
    confidence_score: Optional[float] = None

class ConflictResolution(BaseModel):
    conflicting_agents: list[str]
    conflict_description: Optional[str] = None
    proposed_solutions: list[str]
    final_decision: Optional[str] = None
    confidence_score: Optional[float] = None

class CostEstimate(BaseModel):
    reduction_percentage: Optional[float] = None
    monthly_savings_usd: Optional[float] = None
    cost_factors: list[str]

class CustomRepoInfo(BaseModel):
    repo_name: Optional[str] = None
    functions_available: list[str]
    classes_available: list[str]
    latest_version: Optional[str] = None
    documentation_url: Optional[str] = None

class DataFlow(BaseModel):
    type: Optional[str] = None
    target: Optional[str] = None
    source: Optional[str] = None
    line_number: Optional[int] = None

class DeprecationAnalysis(BaseModel):
    package_name: Optional[str] = None
    method_name: Optional[str] = None
    is_deprecated: Optional[bool] = None
    deprecation_version: Optional[str] = None
    removal_version: Optional[str] = None
    alternatives: list[str]
    migration_notes: list[str]

class EfficiencyComparison(BaseModel):
    package_name: Optional[str] = None
    alternatives: list["PackageAlternative"]
    recommendation: Optional[str] = None
    performance_notes: list[str]
    lambda_compatibility: Optional[bool] = None

class ErrorHandling(BaseModel):
    has_try_catch: Optional[bool] = None
    exception_types: list[str]
    logging_present: Optional[bool] = None

class FileContext(BaseModel):
    fileName: Optional[str] = None
    language: Optional[str] = None
    content: Optional[str] = None
    analysisResults: Optional["AnalysisResults"] = None

class PackageAlternative(BaseModel):
    name: Optional[str] = None
    performance_score: Optional[float] = None
    lambda_size_mb: Optional[float] = None
    pros: list[str]
    cons: list[str]
    use_cases: list[str]

class PackageInfo(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None
    description: Optional[str] = None
    docs_url: Optional[str] = None
    repo_url: Optional[str] = None
    is_deprecated: Optional[bool] = None
    deprecated_methods: list[str]
    alternative_packages: list[str]

class PerformanceEstimate(BaseModel):
    improvement_percentage: Optional[float] = None
    bottleneck_reduction: Optional[str] = None
    scalability_factor: Optional[float] = None

class PipelineAnalysisResult(BaseModel):
    current_pattern: Optional[str] = None
    functions_detected: list["PipelineFunction"]
    complexity_score: Optional[float] = None
    migration_feasibility: Optional[str] = None
    estimated_effort_hours: Optional[int] = None
    aws_service_recommendations: list[str]
    business_logic: Optional["BusinessLogic"] = None
    dependencies: list[str]
    data_flow: list["DataFlow"]

class PipelineFunction(BaseModel):
    name: Optional[str] = None
    line_count: Optional[int] = None
    arguments: list[str]
    has_async: Optional[bool] = None
    has_decorators: Optional[bool] = None
    decorators: list[str]
    calls_external_apis: Optional[bool] = None
    file_operations: Optional[bool] = None
    database_operations: Optional[bool] = None
    data_transformations: Optional[bool] = None

class PipelineStageAnalysis(BaseModel):
    stage_name: Optional[str] = None
    complexity: Optional[str] = None
    runtime_estimate: Optional[str] = None
    parallelization_benefit: Optional[str] = None
    bottleneck_potential: Optional[str] = None
    split_justification: Optional[str] = None

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: list[str]
    skills: list[str]

class SplitterAnalysis(BaseModel):
    optimal_split_point: Optional[str] = None
    split_rationale: Optional[str] = None
    pipeline_stages_analysis: list["PipelineStageAnalysis"]
    performance_impact: Optional["PerformanceEstimate"] = None
    cost_impact: Optional["CostEstimate"] = None

class TransformationRequest(BaseModel):
    pipeline_code: Optional[str] = None
    business_requirements: Optional[str] = None
    target_platform: Optional[str] = None
    performance_goals: Optional[str] = None

class TransformationResult(BaseModel):
    success: Optional[bool] = None
    transformed_code: Optional[str] = None
    validation_results: Optional[str] = None
    infrastructure_code: Optional[str] = None
    git_workflow_results: Optional[str] = None

class ValidationResult(BaseModel):
    functional_equivalence: Optional[bool] = None
    performance_maintained: Optional[bool] = None
    security_validated: Optional[bool] = None
    test_coverage_adequate: Optional[bool] = None
    issues_found: list[str]

class WorkspaceContext(BaseModel):
    pythonFiles: list[str]
    recentAnalyses: list["AnalysisResults"]
    projectType: Optional[str] = None
